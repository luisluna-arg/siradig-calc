// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiradigCalc.Infra.Persistence.DbContexts;

#nullable disable

namespace infra.Persistence.Migrations
{
    [DbContext(typeof(SolutionDbContext))]
    [Migration("20250112002405_AddRecordConversions")]
    partial class AddRecordConversions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("SiradigCalc.Core.Entities.Base.Records.ReceiptToFormConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecordTemplateLinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecordTemplateLinkId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("ReceiptToFormConversions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Base.Records.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Records");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Base.Records.RecordTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RecordTemplates");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.FieldTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FieldTypeMappings");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Text",
                            Name = "Text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Number",
                            Name = "Number",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Date",
                            Name = "Date",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email",
                            Name = "Email",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Checkbox",
                            Name = "Checkbox",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dropdown",
                            Name = "Dropdown",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FormTemplateSectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateSectionId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplateSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("FormTemplateSection");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RecordId");

                    b.ToTable("FormValues");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReceiptTemplateSectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptTemplateSectionId");

                    b.ToTable("ReceiptFields");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplateSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReceiptTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptTemplateId");

                    b.ToTable("ReceiptTemplateSection");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RecordId");

                    b.ToTable("ReceiptValues");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordFieldLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateLinkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormFieldId");

                    b.HasIndex("ReceiptFieldId");

                    b.HasIndex("TemplateLinkId");

                    b.ToTable("RecordFieldLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.HasIndex("ReceiptTemplateId");

                    b.ToTable("RecordTemplateLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.Form", b =>
                {
                    b.HasBaseType("SiradigCalc.Core.Entities.Base.Records.Record");

                    b.Property<Guid>("RecordTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("RecordTemplateId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.Receipt", b =>
                {
                    b.HasBaseType("SiradigCalc.Core.Entities.Base.Records.Record");

                    b.Property<Guid>("RecordTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("RecordTemplateId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplate", b =>
                {
                    b.HasBaseType("SiradigCalc.Core.Entities.Base.Records.RecordTemplate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", b =>
                {
                    b.HasBaseType("SiradigCalc.Core.Entities.Base.Records.RecordTemplate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ReceiptTemplates");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Base.Records.ReceiptToFormConversion", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateLink", "RecordTemplateLink")
                        .WithMany("ReceiptToFormConversions")
                        .HasForeignKey("RecordTemplateLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Receipts.Receipt", "Source")
                        .WithMany("ReceiptToFormConversions")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Forms.Form", "Target")
                        .WithMany("ReceiptToFormConversions")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordTemplateLink");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormField", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormTemplateSection", null)
                        .WithMany("Fields")
                        .HasForeignKey("FormTemplateSectionId");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplateSection", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormTemplate", null)
                        .WithMany("Sections")
                        .HasForeignKey("FormTemplateId");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormValue", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Forms.Form", "Record")
                        .WithMany("Values")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptField", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptTemplateSection", null)
                        .WithMany("Fields")
                        .HasForeignKey("ReceiptTemplateSectionId");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplateSection", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", null)
                        .WithMany("Sections")
                        .HasForeignKey("ReceiptTemplateId");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptValue", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Receipts.Receipt", "Record")
                        .WithMany("Values")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordFieldLink", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptField", "ReceiptField")
                        .WithMany()
                        .HasForeignKey("ReceiptFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateLink", "TemplateLink")
                        .WithMany("RecordFieldLinks")
                        .HasForeignKey("TemplateLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormField");

                    b.Navigation("ReceiptField");

                    b.Navigation("TemplateLink");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormTemplate", "FormTemplate")
                        .WithMany()
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", "ReceiptTemplate")
                        .WithMany()
                        .HasForeignKey("ReceiptTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormTemplate");

                    b.Navigation("ReceiptTemplate");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.Form", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Base.Records.Record", null)
                        .WithOne()
                        .HasForeignKey("SiradigCalc.Core.Entities.Forms.Form", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Forms.FormTemplate", "RecordTemplate")
                        .WithMany()
                        .HasForeignKey("RecordTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordTemplate");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.Receipt", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Base.Records.Record", null)
                        .WithOne()
                        .HasForeignKey("SiradigCalc.Core.Entities.Receipts.Receipt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", "RecordTemplate")
                        .WithMany()
                        .HasForeignKey("RecordTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordTemplate");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplate", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Base.Records.RecordTemplate", null)
                        .WithOne()
                        .HasForeignKey("SiradigCalc.Core.Entities.Forms.FormTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.Base.Records.RecordTemplate", null)
                        .WithOne()
                        .HasForeignKey("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplateSection", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplateSection", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.Navigation("ReceiptToFormConversions");

                    b.Navigation("RecordFieldLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.Form", b =>
                {
                    b.Navigation("ReceiptToFormConversions");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.Receipt", b =>
                {
                    b.Navigation("ReceiptToFormConversions");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Forms.FormTemplate", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Receipts.ReceiptTemplate", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
