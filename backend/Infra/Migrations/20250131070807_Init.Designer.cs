// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiradigCalc.Infra.Persistence.DbContexts;

#nullable disable

namespace infra.Migrations
{
    [DbContext(typeof(SolutionDbContext))]
    [Migration("20250131070807_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("SiradigCalc.Core.Entities.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.FieldTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FieldTypeMappings");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Text",
                            Name = "Text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Number",
                            Name = "Number",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Date",
                            Name = "Date",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Email",
                            Name = "Email",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Checkbox",
                            Name = "Checkbox",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Dropdown",
                            Name = "Dropdown",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RecordTemplates");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RecordTemplateLinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecordTemplateLinkId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("RecordTemplateConversions");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecordTemplateSectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecordTemplateSectionId");

                    b.ToTable("RecordTemplateFields");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateFieldLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LeftFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecordTemplateFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RightFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateLinkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeftFieldId");

                    b.HasIndex("RecordTemplateFieldId");

                    b.HasIndex("RightFieldId");

                    b.HasIndex("TemplateLinkId");

                    b.ToTable("RecordFieldLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LeftTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RightTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeftTemplateId");

                    b.HasIndex("RightTemplateId");

                    b.ToTable("RecordTemplateLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RecordTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecordTemplateId");

                    b.ToTable("RecordTemplateSections");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordValues");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Record", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateConversion", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateLink", "RecordTemplateLink")
                        .WithMany()
                        .HasForeignKey("RecordTemplateLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Record", "Source")
                        .WithMany("ConvertedTo")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Record", "Target")
                        .WithMany("ConvertedFrom")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecordTemplateLink");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateField", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateSection", "RecordTemplateSection")
                        .WithMany("Fields")
                        .HasForeignKey("RecordTemplateSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordTemplateSection");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateFieldLink", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateField", "LeftField")
                        .WithMany()
                        .HasForeignKey("LeftFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateField", null)
                        .WithMany("Links")
                        .HasForeignKey("RecordTemplateFieldId");

                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateField", "RightField")
                        .WithMany()
                        .HasForeignKey("RightFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateLink", "TemplateLink")
                        .WithMany("RecordFieldLinks")
                        .HasForeignKey("TemplateLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftField");

                    b.Navigation("RightField");

                    b.Navigation("TemplateLink");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplate", "LeftTemplate")
                        .WithMany()
                        .HasForeignKey("LeftTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplate", "RightTemplate")
                        .WithMany()
                        .HasForeignKey("RightTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftTemplate");

                    b.Navigation("RightTemplate");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateSection", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplate", null)
                        .WithMany("Sections")
                        .HasForeignKey("RecordTemplateId");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordValue", b =>
                {
                    b.HasOne("SiradigCalc.Core.Entities.RecordTemplateField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiradigCalc.Core.Entities.Record", "Record")
                        .WithMany("Values")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.Record", b =>
                {
                    b.Navigation("ConvertedFrom");

                    b.Navigation("ConvertedTo");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplate", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateField", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateLink", b =>
                {
                    b.Navigation("RecordFieldLinks");
                });

            modelBuilder.Entity("SiradigCalc.Core.Entities.RecordTemplateSection", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
